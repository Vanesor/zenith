generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ai_assignment_generations {
  id                      String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  templateId             String?               @db.Uuid @map("template_id")
  generatedAssignmentId String?               @db.Uuid @map("generated_assignment_id")
  sourceFileUrl         String @map("source_file_url")
  generationPrompt       String? @map("generation_prompt")
  aiModelUsed           String?               @db.VarChar @map("ai_model_used")
  generationStatus       String?               @default("pending") @db.VarChar @map("generation_status")
  questionsExtracted     Int?                  @default(0) @map("questions_extracted")
  questionsCreated       Int?                  @default(0) @map("questions_created")
  processingLog          Json?                 @default("[]") @map("processing_log")
  errorDetails           String? @map("error_details")
  generatedBy            String?               @db.Uuid @map("generated_by")
  createdAt              DateTime?             @default(now()) @db.Timestamptz(6) @map("created_at")
  completedAt            DateTime?             @db.Timestamptz(6) @map("completed_at")
  assignments             assignments?          @relation(fields: [generated_assignment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ai_generations_assignment")
  assignmentTemplates    assignment_templates? @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ai_generations_template") @map("assignment_templates")
  users                   users?                @relation(fields: [generated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ai_generations_user")

  @@index([generated_assignment_id], map: "idx_ai_generations_assignment_id")
  @@index([created_at], map: "idx_ai_generations_created_at")
  @@index([generation_status], map: "idx_ai_generations_status")
  @@index([template_id], map: "idx_ai_generations_template_id")
}

model announcements {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title      String    @db.VarChar(255)
  content    String
  authorId  String?   @db.Uuid @map("author_id")
  clubId    String?   @db.VarChar(50) @map("club_id")
  priority   String?   @default("normal") @db.VarChar(50)
  expiresAt DateTime? @db.Timestamptz(6) @map("expires_at")
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt DateTime? @default(now()) @db.Timestamptz(6) @map("updated_at")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model assignment_attempts {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assignmentId        String                 @db.Uuid @map("assignment_id")
  userId              String                 @db.Uuid @map("user_id")
  attemptNumber       Int                    @default(1) @map("attempt_number")
  startTime           DateTime?              @default(now()) @db.Timestamptz(6) @map("start_time")
  endTime             DateTime?              @db.Timestamptz(6) @map("end_time")
  timeSpent           Int?                   @default(0) @map("time_spent")
  score                Int?                   @default(0)
  maxScore            Int?                   @default(0) @map("max_score")
  percentage           Decimal?               @default(0) @db.Decimal(5, 2)
  isPassing           Boolean?               @default(false) @map("is_passing")
  answers              Json?                  @default("{}")
  graded_answers       Json?                  @default("{}")
  violations           Json?                  @default("[]")
  status               String?                @default("in_progress") @db.VarChar
  submitted_at         DateTime?              @db.Timestamptz(6)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  is_fullscreen        Boolean?               @default(false)
  auto_save_data       Json?                  @default("{}")
  window_violations    Int?                   @default(0)
  last_auto_save       DateTime?              @db.Timestamptz(6)
  browser_info         Json?                  @default("{}")
  assignments          assignments            @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                users                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assignment_audit_log assignment_audit_log[]

  @@index([assignment_id], map: "idx_assignment_attempts_assignment_id")
  @@index([assignment_id, user_id], map: "idx_assignment_attempts_assignment_user")
  @@index([assignment_id, user_id, last_auto_save], map: "idx_assignment_attempts_auto_save")
  @@index([status], map: "idx_assignment_attempts_status")
  @@index([submitted_at], map: "idx_assignment_attempts_submitted_at")
  @@index([user_id], map: "idx_assignment_attempts_user_id")
  @@index([user_id, status, submitted_at(sort: Desc)], map: "idx_assignment_attempts_user_status")
  @@index([assignment_id, window_violations], map: "idx_assignment_attempts_violations")
  @@index([assignment_id, status], map: "idx_attempts_assignment_status")
  @@index([user_id, assignment_id, attempt_number], map: "idx_attempts_user_assignment")
}

model assignment_audit_log {
  id                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assignmentId       String               @db.Uuid @map("assignment_id")
  userId             String               @db.Uuid @map("user_id")
  attemptId          String?              @db.Uuid @map("attempt_id")
  action              String               @db.VarChar
  details             Json?                @default("{}")
  created_at          DateTime?            @default(now()) @db.Timestamptz(6)
  assignments         assignments          @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assignment_attempts assignment_attempts? @relation(fields: [attempt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assignment_id], map: "idx_assignment_audit_log_assignment")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model assignment_questions {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assignmentId      String               @db.Uuid @map("assignment_id")
  questionText      String @map("question_text")
  questionType      String               @db.VarChar @map("question_type")
  marks              Int                  @default(1)
  timeLimit         Int? @map("time_limit")
  codeLanguage      String?              @db.VarChar @map("code_language")
  codeTemplate      String? @map("code_template")
  testCases         Json? @map("test_cases")
  expectedOutput    String? @map("expected_output")
  solution           String?
  ordering           Int                  @default(0)
  createdAt         DateTime?            @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt         DateTime?            @default(now()) @db.Timestamptz(6) @map("updated_at")
  type               String?              @db.VarChar
  title              String?              @db.VarChar
  description        String?
  options            Json?
  correctAnswer     Json? @map("correct_answer")
  points             Int?                 @default(1)
  questionOrder     Int?                 @default(0) @map("question_order")
  starterCode       String? @map("starter_code")
  integerMin        Decimal?             @db.Decimal @map("integer_min")
  integerMax        Decimal?             @db.Decimal @map("integer_max")
  integerStep       Decimal?             @default(1) @db.Decimal @map("integer_step")
  explanation        String?
  allowedLanguages  Json?                @default("[]") @map("allowed_languages")
  allowAnyLanguage Boolean?             @default(false) @map("allow_any_language")
  questionImageUrl String? @map("question_image_url")
  questionImageAlt String? @map("question_image_alt")
  questionImages    Json?                @default("[]") @map("question_images")
  answerImages      Json?                @default("[]") @map("answer_images")
  assignments        assignments          @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_assignment")
  questionMedia     question_media[] @map("question_media")
  questionOptions   question_options[] @map("question_options")
  questionResponses question_responses[] @map("question_responses")

  @@index([assignment_id], map: "idx_assignment_questions_assignment_id")
  @@index([correct_answer], map: "idx_assignment_questions_correct_answer_jsonb", type: Gin)
  @@index([code_language, allow_any_language], map: "idx_assignment_questions_language_settings")
  @@index([assignment_id, question_order], map: "idx_questions_assignment_order")
  @@index([question_type], map: "idx_questions_type")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model assignment_submissions {
  id                    String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assignmentId         String?                 @db.Uuid @map("assignment_id")
  userId               String?                 @db.Uuid @map("user_id")
  submissionText       String? @map("submission_text")
  fileUrl              String? @map("file_url")
  submittedAt          DateTime?               @default(now()) @db.Timestamptz(6) @map("submitted_at")
  status                String?                 @default("submitted") @db.VarChar(50)
  grade                 Int?
  feedback              String?
  startedAt            DateTime?               @db.Timestamptz(6) @map("started_at")
  completedAt          DateTime?               @db.Timestamptz(6) @map("completed_at")
  violationCount       Int?                    @default(0) @map("violation_count")
  timeSpent            Int? @map("time_spent")
  autoSubmitted        Boolean?                @default(false) @map("auto_submitted")
  ipAddress            String?                 @db.VarChar @map("ip_address")
  userAgent            String? @map("user_agent")
  totalScore           Int?                    @default(0) @map("total_score")
  assignments           assignments?            @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assignmentViolations assignment_violations[] @map("assignment_violations")
  questionResponses    question_responses[] @map("question_responses")

  @@unique([assignment_id, user_id])
  @@index([user_id, submitted_at(sort: Desc)], map: "idx_assignment_submissions_user_submitted")
  @@index([assignment_id, status], map: "idx_submissions_assignment_status")
  @@index([status, submitted_at(sort: Desc)], map: "idx_submissions_status_submitted")
  @@index([user_id, submitted_at(sort: Desc)], map: "idx_submissions_user_submitted")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model assignment_templates {
  id                        String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                      String                      @db.VarChar
  description               String?
  templateFileUrl         String @map("template_file_url")
  templateType             String                      @db.VarChar @map("template_type")
  category                  String?                     @db.VarChar
  subject                   String?                     @db.VarChar
  difficultyLevel          String?                     @db.VarChar @map("difficulty_level")
  estimatedQuestions       Int? @map("estimated_questions")
  createdBy                String?                     @db.Uuid @map("created_by")
  isActive                 Boolean?                    @default(true) @map("is_active")
  usageCount               Int?                        @default(0) @map("usage_count")
  metadata                  Json?                       @default("{}")
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  ai_assignment_generations ai_assignment_generations[]
  users                     users?                      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignment_templates_created_by")

  @@index([category], map: "idx_assignment_templates_category")
  @@index([created_by], map: "idx_assignment_templates_created_by")
  @@index([difficulty_level], map: "idx_assignment_templates_difficulty")
  @@index([subject], map: "idx_assignment_templates_subject")
}

model assignment_violations {
  id                     String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submissionId          String                 @db.Uuid @map("submission_id")
  violationType         String                 @db.VarChar @map("violation_type")
  occurredAt            DateTime?              @default(now()) @db.Timestamptz(6) @map("occurred_at")
  details                Json?
  assignmentSubmissions assignment_submissions @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_submission") @map("assignment_submissions")

  @@index([submission_id], map: "idx_assignment_violations_submission_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model assignments {
  id                        String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                     String                      @db.VarChar(255)
  description               String
  clubId                   String?                     @db.VarChar(50) @map("club_id")
  createdBy                String?                     @db.Uuid @map("created_by")
  dueDate                  DateTime                    @db.Timestamptz(6) @map("due_date")
  maxPoints                Int?                        @default(100) @map("max_points")
  instructions              String?
  status                    String?                     @default("active") @db.VarChar(50)
  createdAt                DateTime?                   @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt                DateTime?                   @default(now()) @db.Timestamptz(6) @map("updated_at")
  assignmentType           String?                     @default("regular") @db.VarChar @map("assignment_type")
  targetAudience           String?                     @default("club") @db.VarChar @map("target_audience")
  targetClubs              String[]                    @default([]) @db.VarChar @map("target_clubs")
  timeLimit                Int? @map("time_limit")
  allowNavigation          Boolean?                    @default(true) @map("allow_navigation")
  passingScore             Int?                        @default(60) @map("passing_score")
  isProctored              Boolean?                    @default(false) @map("is_proctored")
  shuffleQuestions         Boolean?                    @default(false) @map("shuffle_questions")
  allowCalculator          Boolean?                    @default(true) @map("allow_calculator")
  showResults              Boolean?                    @default(true) @map("show_results")
  allowReview              Boolean?                    @default(true) @map("allow_review")
  shuffleOptions           Boolean?                    @default(false) @map("shuffle_options")
  maxAttempts              Int?                        @default(1) @map("max_attempts")
  isPublished              Boolean?                    @default(false) @map("is_published")
  codingInstructions       String?                     @default("Write your code solution. Make sure to test your code thoroughly before submitting.") @map("coding_instructions")
  objectiveInstructions    String?                     @default("Choose the correct answer(s) for each question. For multi-select questions, you may choose multiple options.") @map("objective_instructions")
  mixedInstructions        String?                     @default("This assignment contains different types of questions. Read each question carefully and provide appropriate answers.") @map("mixed_instructions")
  essayInstructions        String?                     @default("Provide detailed written responses to the essay questions. Ensure your answers are well-structured and comprehensive.") @map("essay_instructions")
  requireFullscreen        Boolean?                    @default(false) @map("require_fullscreen")
  autoSubmitOnViolation  Boolean?                    @default(false) @map("auto_submit_on_violation")
  maxViolations            Int?                        @default(3) @map("max_violations")
  code_editor_settings      Json?                       @default("{\"theme\": \"vs-dark\", \"autoSave\": true, \"fontSize\": 14, \"wordWrap\": true, \"autoSaveInterval\": 30000}")
  require_camera            Boolean?                    @default(false)
  require_microphone        Boolean?                    @default(false)
  require_face_verification Boolean?                    @default(false)
  proctoring_settings       Json?                       @default("{}")
  start_date                DateTime?                   @db.Timestamptz(6)
  start_time                DateTime?                   @db.Timestamptz(6)
  ai_assignment_generations ai_assignment_generations[]
  assignment_attempts       assignment_attempts[]
  assignment_audit_log      assignment_audit_log[]
  assignment_questions      assignment_questions[]
  assignment_submissions    assignment_submissions[]
  clubs                     clubs?                      @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                     users?                      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proctoring_sessions       proctoring_sessions[]

  @@index([club_id, due_date], map: "idx_assignments_club_due")
  @@index([club_id], map: "idx_assignments_club_id")
  @@index([created_by, due_date], map: "idx_assignments_created_by")
  @@index([due_date], map: "idx_assignments_due_date")
  @@index([is_published], map: "idx_assignments_is_published")
  @@index([is_published], map: "idx_assignments_published")
  @@index([status], map: "idx_assignments_status")
  @@index([assignment_type], map: "idx_assignments_type")
}

model chat_attachments {
  id                String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  messageId        String?        @db.Uuid @map("message_id")
  roomId           String         @db.Uuid @map("room_id")
  filename          String         @db.VarChar(500)
  originalFilename String         @db.VarChar(500) @map("original_filename")
  filePath         String         @db.VarChar(1000) @map("file_path")
  fileType         String         @db.VarChar(50) @map("file_type")
  fileSize         Int @map("file_size")
  mimeType         String?        @db.VarChar(100) @map("mime_type")
  encryptionKey    String? @map("encryption_key")
  createdAt        DateTime?      @default(now()) @db.Timestamptz(6) @map("created_at")
  chatMessages     chat_messages? @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction) @map("chat_messages")

  @@index([message_id], map: "idx_chat_attachments_message_id")
  @@index([room_id], map: "idx_chat_attachments_room_id")
}

model chat_invitations {
  id               String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  roomId          String     @db.Uuid @map("room_id")
  inviterId       String     @db.Uuid @map("inviter_id")
  inviteeEmail    String     @db.VarChar(255) @map("invitee_email")
  invitationToken String     @unique @db.VarChar(100) @map("invitation_token")
  message          String?
  status           String?    @default("pending") @db.VarChar(20)
  expiresAt       DateTime   @db.Timestamptz(6) @map("expires_at")
  createdAt       DateTime?  @default(now()) @db.Timestamptz(6) @map("created_at")
  acceptedAt      DateTime?  @db.Timestamptz(6) @map("accepted_at")
  users            users      @relation(fields: [inviter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  chatRooms       chat_rooms @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction) @map("chat_rooms")

  @@index([invitee_email], map: "idx_chat_invitations_email")
  @@index([invitation_token], map: "idx_chat_invitations_token")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model chat_messages {
  id                                                                   String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  roomId                                                              String?            @db.Uuid @map("room_id")
  userId                                                              String?            @db.Uuid @map("user_id")
  message                                                              String
  messageType                                                         String?            @default("text") @db.VarChar(50) @map("message_type")
  fileUrl                                                             String? @map("file_url")
  createdAt                                                           DateTime?          @default(now()) @db.Timestamptz(6) @map("created_at")
  replyToMessageId                                                  String?            @db.Uuid @map("reply_to_message_id")
  isEdited                                                            Boolean?           @default(false) @map("is_edited")
  replyTo                                                             String?            @db.Uuid @map("reply_to")
  senderId                                                            String?            @db.Uuid @map("sender_id")
  content                                                              String?
  isEncrypted                                                         Boolean?           @default(false) @map("is_encrypted")
  updatedAt                                                           DateTime?          @db.Timestamptz(6) @map("updated_at")
  attachments                                                          Json?              @default("[]")
  messageImages                                                       Json?              @default("[]") @map("message_images")
  reactions                                                            Json?              @default("{}")
  thread_id                                                            String?            @db.Uuid
  chat_attachments                                                     chat_attachments[]
  chat_messages_chat_messages_reply_toTochat_messages                  chat_messages?     @relation("chat_messages_reply_toTochat_messages", fields: [reply_to], references: [id], onUpdate: NoAction)
  other_chat_messages_chat_messages_reply_toTochat_messages            chat_messages[]    @relation("chat_messages_reply_toTochat_messages")
  chat_messages_chat_messages_reply_to_message_idTochat_messages       chat_messages?     @relation("chat_messages_reply_to_message_idTochat_messages", fields: [reply_to_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_chat_messages_chat_messages_reply_to_message_idTochat_messages chat_messages[]    @relation("chat_messages_reply_to_message_idTochat_messages")
  chat_rooms                                                           chat_rooms?        @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_chat_messages_sender_idTousers                                 users?             @relation("chat_messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_chat_messages_user_idTousers                                   users?             @relation("chat_messages_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  chat_messages_chat_messages_thread_idTochat_messages                 chat_messages?     @relation("chat_messages_thread_idTochat_messages", fields: [thread_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chat_messages_thread")
  other_chat_messages_chat_messages_thread_idTochat_messages           chat_messages[]    @relation("chat_messages_thread_idTochat_messages")

  @@index([created_at], map: "idx_chat_messages_created_at")
  @@index([is_encrypted], map: "idx_chat_messages_encrypted")
  @@index([reply_to], map: "idx_chat_messages_reply_to")
  @@index([room_id], map: "idx_chat_messages_room_id")
  @@index([room_id, created_at(sort: Desc)], map: "idx_chat_messages_room_time")
  @@index([sender_id], map: "idx_chat_messages_sender_id")
  @@index([message_type], map: "idx_chat_messages_type")
  @@index([user_id], map: "idx_chat_messages_user_id")
  @@index([user_id, created_at(sort: Desc)], map: "idx_chat_messages_user_time")
}

model chat_room_members {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatRoomId String?     @db.Uuid @map("chat_room_id")
  userId      String?     @db.Uuid @map("user_id")
  joinedAt    DateTime?   @default(now()) @db.Timestamptz(6) @map("joined_at")
  role         String?     @default("member") @db.VarChar(20)
  userEmail   String?     @db.VarChar(255) @map("user_email")
  chatRooms   chat_rooms? @relation(fields: [chat_room_id], references: [id], onDelete: Cascade, onUpdate: NoAction) @map("chat_rooms")
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([chat_room_id, user_id])
  @@index([chat_room_id], map: "idx_chat_room_members_chat_room_id")
  @@index([chat_room_id, joined_at], map: "idx_chat_room_members_room")
  @@index([chat_room_id], map: "idx_chat_room_members_room_id")
  @@index([user_id, joined_at(sort: Desc)], map: "idx_chat_room_members_user")
  @@index([user_id], map: "idx_chat_room_members_user_id")
}

model chat_rooms {
  id                 String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String              @db.VarChar(255)
  description        String?
  clubId            String?             @db.VarChar(50) @map("club_id")
  type               String?             @default("public") @db.VarChar(50)
  createdBy         String?             @db.Uuid @map("created_by")
  members            String[]            @default([]) @db.Uuid
  createdAt         DateTime?           @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt         DateTime?           @default(now()) @db.Timestamptz(6) @map("updated_at")
  roomType          String?             @default("public") @db.VarChar(20) @map("room_type")
  encryptionEnabled Boolean?            @default(false) @map("encryption_enabled")
  coverImageUrl    String? @map("cover_image_url")
  roomImages        Json?               @default("[]") @map("room_images")
  room_settings      Json?               @default("{}")
  chat_invitations   chat_invitations[]
  chat_messages      chat_messages[]
  chat_room_members  chat_room_members[]
  clubs              clubs?              @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users?              @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([club_id], map: "idx_chat_rooms_club_id")
  @@index([created_by], map: "idx_chat_rooms_created_by")
  @@index([type], map: "idx_chat_rooms_type")
  @@index([updated_at(sort: Desc)], map: "idx_chat_rooms_updated")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model club_members {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId   String    @db.Uuid @map("user_id")
  clubId   String    @db.Uuid @map("club_id")
  isLeader Boolean?  @default(false) @map("is_leader")
  joinedAt DateTime? @default(now()) @db.Timestamptz(6) @map("joined_at")

  @@unique([user_id, club_id])
  @@index([club_id], map: "idx_club_members_club_id")
  @@index([user_id], map: "idx_club_members_user_id")
}

model club_statistics {
  id                 Int       @id @default(autoincrement())
  clubId            String?   @db.VarChar @map("club_id")
  memberCount       Int?      @default(0) @map("member_count")
  eventCount        Int?      @default(0) @map("event_count")
  assignmentCount   Int?      @default(0) @map("assignment_count")
  commentCount      Int?      @default(0) @map("comment_count")
  totalEngagement   Int?      @default(0) @map("total_engagement")
  averageEngagement Decimal?  @default(0) @db.Decimal(5, 2) @map("average_engagement")
  lastUpdated       DateTime? @default(now()) @db.Timestamptz(6) @map("last_updated")
  clubs              clubs?    @relation(fields: [club_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model clubs {
  id                                   String            @id @db.VarChar(50)
  name                                 String            @db.VarChar(255)
  type                                 String            @db.VarChar(255)
  description                          String
  longDescription                     String? @map("long_description")
  icon                                 String            @db.VarChar(100)
  color                                String            @db.VarChar(100)
  coordinatorId                       String?           @db.Uuid @map("coordinator_id")
  coCoordinatorId                    String?           @db.Uuid @map("co_coordinator_id")
  secretaryId                         String?           @db.Uuid @map("secretary_id")
  mediaId                             String?           @db.Uuid @map("media_id")
  guidelines                           String?
  meeting_schedule                     Json?             @default("{}")
  created_at                           DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?         @default(now()) @db.Timestamptz(6)
  logo_url                             String?
  banner_image_url                     String?
  club_images                          Json?             @default("[]")
  member_count                         Int?              @default(0)
  assignments                          assignments[]
  chat_rooms                           chat_rooms[]
  club_statistics                      club_statistics[]
  users_clubs_co_coordinator_idTousers users?            @relation("clubs_co_coordinator_idTousers", fields: [co_coordinator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubs_co_coordinator")
  users_clubs_coordinator_idTousers    users?            @relation("clubs_coordinator_idTousers", fields: [coordinator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubs_coordinator")
  users_clubs_media_idTousers          users?            @relation("clubs_media_idTousers", fields: [media_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubs_media")
  users_clubs_secretary_idTousers      users?            @relation("clubs_secretary_idTousers", fields: [secretary_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubs_secretary")
  discussions                          discussions[]
  events                               events[]
  posts                                posts[]
  users_users_club_idToclubs           users[]           @relation("users_club_idToclubs")

  @@index([created_at], map: "idx_clubs_created_at")
  @@index([name], map: "idx_clubs_name")
  @@index([type], map: "idx_clubs_type")
  @@index([updated_at(sort: Desc)], map: "idx_clubs_updated")
}

model code_results {
  id                 String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  responseId        String             @db.Uuid @map("response_id")
  testCaseIndex    Int? @map("test_case_index")
  passed             Boolean?
  stdout             String?
  stderr             String?
  executionTime     Int? @map("execution_time")
  memoryUsed        Int? @map("memory_used")
  createdAt         DateTime?          @default(now()) @db.Timestamptz(6) @map("created_at")
  questionResponses question_responses @relation(fields: [response_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_response") @map("question_responses")

  @@index([response_id], map: "idx_code_results_response_id")
}

model coding_submissions {
  id                   String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  questionResponseId String             @db.Uuid @map("question_response_id")
  language             String             @db.VarChar
  code                 String
  isFinal             Boolean?           @default(false) @map("is_final")
  execution_result     Json?              @default("{}")
  created_at           DateTime?          @default(now()) @db.Timestamptz(6)
  question_responses   question_responses @relation(fields: [question_response_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([language], map: "idx_coding_submissions_language")
  @@index([question_response_id], map: "idx_coding_submissions_question_response")
}

model comments {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId        String?    @db.Uuid @map("post_id")
  authorId      String?    @db.Uuid @map("author_id")
  content        String
  parentId      String?    @db.Uuid @map("parent_id")
  createdAt     DateTime?  @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime?  @default(now()) @db.Timestamptz(6) @map("updated_at")
  likesCount    Int?       @default(0) @map("likes_count")
  users          users?     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comments       comments?  @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  otherComments comments[] @relation("commentsTocomments") @map("other_comments")
  posts          posts?     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([author_id, created_at(sort: Desc)], map: "idx_comments_author_created")
  @@index([author_id], map: "idx_comments_author_id")
  @@index([created_at], map: "idx_comments_created_at")
  @@index([parent_id], map: "idx_comments_parent_id")
  @@index([post_id, created_at], map: "idx_comments_post_created")
  @@index([post_id], map: "idx_comments_post_id")
}

model committee_members {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  committeeId    String          @db.Uuid @map("committee_id")
  roleId         String          @db.Uuid @map("role_id")
  userId         String          @db.Uuid @map("user_id")
  status          String?         @default("active") @db.VarChar(50)
  joinedAt       DateTime?       @default(now()) @db.Timestamptz(6) @map("joined_at")
  termStart      DateTime?       @db.Timestamptz(6) @map("term_start")
  termEnd        DateTime?       @db.Timestamptz(6) @map("term_end")
  achievements    Json?
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6) @map("updated_at")
  committees      committees      @relation(fields: [committee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  committeeRoles committee_roles @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction) @map("committee_roles")

  @@unique([committee_id, role_id, user_id])
  @@index([committee_id], map: "idx_committee_members_committee_id")
  @@index([role_id], map: "idx_committee_members_role_id")
  @@index([status], map: "idx_committee_members_status")
  @@index([user_id], map: "idx_committee_members_user_id")
}

model committee_roles {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  committeeId      String              @db.Uuid @map("committee_id")
  name              String              @db.VarChar(255)
  description       String?
  hierarchy         Int                 @default(1)
  permissions       String[]            @default([])
  createdAt        DateTime?           @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt        DateTime?           @default(now()) @db.Timestamptz(6) @map("updated_at")
  committeeMembers committee_members[] @map("committee_members")
  committees        committees          @relation(fields: [committee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([committee_id, name])
  @@index([committee_id], map: "idx_committee_roles_committee_id")
}

model committees {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String              @unique @db.VarChar(255)
  description       String?
  hierarchyLevel   Int                 @default(1) @map("hierarchy_level")
  isActive         Boolean?            @default(true) @map("is_active")
  createdAt        DateTime?           @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt        DateTime?           @default(now()) @db.Timestamptz(6) @map("updated_at")
  committeeMembers committee_members[] @map("committee_members")
  committeeRoles   committee_roles[] @map("committee_roles")
}

model discussion_replies {
  id                       String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  discussionId            String?              @db.Uuid @map("discussion_id")
  authorId                String?              @db.Uuid @map("author_id")
  content                  String
  parentId                String?              @db.Uuid @map("parent_id")
  likesCount              Int?                 @default(0) @map("likes_count")
  createdAt               DateTime?            @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt               DateTime?            @default(now()) @db.Timestamptz(6) @map("updated_at")
  users                    users?               @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  discussions              discussions?         @relation(fields: [discussion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discussionReplies       discussion_replies?  @relation("discussion_repliesTodiscussion_replies", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction) @map("discussion_replies")
  otherDiscussionReplies discussion_replies[] @relation("discussion_repliesTodiscussion_replies") @map("other_discussion_replies")

  @@index([author_id, created_at(sort: Desc)], map: "idx_discussion_replies_author")
  @@index([discussion_id, created_at], map: "idx_discussion_replies_discussion")
  @@index([discussion_id], map: "idx_discussion_replies_discussion_id")
}

model discussions {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title              String               @db.VarChar(255)
  description        String?
  authorId          String?              @db.Uuid @map("author_id")
  clubId            String?              @db.VarChar(50) @map("club_id")
  tags               String[]             @default([])
  isLocked          Boolean?             @default(false) @map("is_locked")
  isPinned          Boolean?             @default(false) @map("is_pinned")
  viewsCount        Int?                 @default(0) @map("views_count")
  repliesCount      Int?                 @default(0) @map("replies_count")
  lastActivity      DateTime?            @default(now()) @db.Timestamptz(6) @map("last_activity")
  createdAt         DateTime?            @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt         DateTime?            @default(now()) @db.Timestamptz(6) @map("updated_at")
  discussionReplies discussion_replies[] @map("discussion_replies")
  users              users?               @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clubs              clubs?               @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([author_id, created_at(sort: Desc)], map: "idx_discussions_author")
  @@index([club_id, last_activity(sort: Desc)], map: "idx_discussions_club_activity")
  @@index([club_id], map: "idx_discussions_club_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model email_logs {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipient       String    @db.VarChar
  subject         String    @db.VarChar
  contentPreview String? @map("content_preview")
  status          String?   @default("sent") @db.VarChar
  messageId      String?   @db.VarChar @map("message_id")
  category        String?   @db.VarChar
  relatedId      String?   @db.Uuid @map("related_id")
  createdAt      DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  sentAt         DateTime? @default(now()) @db.Timestamptz(6) @map("sent_at")
  emailService   String?   @default("resend") @db.VarChar(50) @map("email_service")
  errorMessage   String? @map("error_message")
  updatedAt      DateTime? @default(now()) @db.Timestamptz(6) @map("updated_at")

  @@index([category], map: "idx_email_logs_category")
  @@index([created_at], map: "idx_email_logs_created_at")
  @@index([recipient], map: "idx_email_logs_recipient")
}

model event_attendees {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventId          String?   @db.Uuid @map("event_id")
  userId           String?   @db.Uuid @map("user_id")
  registeredAt     DateTime? @default(now()) @db.Timestamptz(6) @map("registered_at")
  attendanceStatus String?   @default("registered") @db.VarChar(50) @map("attendance_status")
  events            events?   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([event_id, user_id])
  @@unique([event_id, user_id], map: "idx_event_attendees_unique")
  @@index([event_id, registered_at], map: "idx_event_attendees_event")
  @@index([attendance_status], map: "idx_event_attendees_status")
  @@index([user_id, registered_at(sort: Desc)], map: "idx_event_attendees_user")
}

model event_registrations {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventId          String?   @db.Uuid @map("event_id")
  userId           String?   @db.Uuid @map("user_id")
  status            String?   @default("registered") @db.VarChar(50)
  registrationData Json? @map("registration_data")
  registeredAt     DateTime? @default(now()) @db.Timestamptz(6) @map("registered_at")
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6) @map("updated_at")

  @@unique([event_id, user_id])
  @@index([event_id], map: "idx_event_registrations_event_id")
  @@index([user_id], map: "idx_event_registrations_user_id")
}

model events {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String            @db.VarChar(255)
  description      String
  clubId          String?           @db.VarChar(50) @map("club_id")
  createdBy       String?           @db.Uuid @map("created_by")
  eventDate       DateTime          @db.Date @map("event_date")
  eventTime       DateTime          @db.Time(6) @map("event_time")
  location         String            @db.VarChar(255)
  maxAttendees    Int? @map("max_attendees")
  status           String?           @default("upcoming") @db.VarChar(50)
  imageUrl        String? @map("image_url")
  createdAt       DateTime?         @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt       DateTime?         @default(now()) @db.Timestamptz(6) @map("updated_at")
  eventImages     Json?             @default("[]") @map("event_images")
  bannerImageUrl String? @map("banner_image_url")
  galleryImages   Json?             @default("[]") @map("gallery_images")
  eventAttendees  event_attendees[] @map("event_attendees")
  clubs            clubs?            @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users            users?            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([club_id, event_date], map: "idx_events_club_date")
  @@index([club_id], map: "idx_events_club_id")
  @@index([created_by, event_date(sort: Desc)], map: "idx_events_created_by")
  @@index([event_date], map: "idx_events_date")
  @@index([event_date], map: "idx_events_event_date")
  @@index([status], map: "idx_events_status")
  @@index([status, event_date], map: "idx_events_status_date")
}

model likes {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String?   @db.Uuid @map("post_id")
  userId    String?   @db.Uuid @map("user_id")
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id])
  @@index([created_at], map: "idx_likes_created_at")
  @@index([post_id], map: "idx_likes_post_id")
  @@index([user_id], map: "idx_likes_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model media_files {
  id                  String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  filename            String           @db.VarChar
  originalFilename   String           @db.VarChar @map("original_filename")
  fileSize           Int @map("file_size")
  mimeType           String           @db.VarChar @map("mime_type")
  fileUrl            String @map("file_url")
  thumbnailUrl       String? @map("thumbnail_url")
  altText            String? @map("alt_text")
  description         String?
  uploadedBy         String?          @db.Uuid @map("uploaded_by")
  uploadContext      String?          @db.VarChar @map("upload_context")
  uploadReferenceId String?          @db.Uuid @map("upload_reference_id")
  isPublic           Boolean?         @default(true) @map("is_public")
  metadata            Json?            @default("{}")
  created_at          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @default(now()) @db.Timestamptz(6)
  users               users?           @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_media_files_uploaded_by")
  question_media      question_media[]

  @@index([upload_context, upload_reference_id], map: "idx_media_files_context")
  @@index([created_at], map: "idx_media_files_created_at")
  @@index([upload_context], map: "idx_media_files_upload_context")
  @@index([upload_reference_id], map: "idx_media_files_upload_reference_id")
  @@index([uploaded_by], map: "idx_media_files_uploaded_by")
  @@index([uploaded_by, created_at(sort: Desc)], map: "idx_media_files_uploader")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model messages {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatRoomId   String    @db.Uuid @map("chat_room_id")
  userId        String    @db.Uuid @map("user_id")
  content        String
  attachmentUrl String? @map("attachment_url")
  createdAt     DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
}

model notifications {
  id              Int       @id @default(autoincrement())
  userId         String    @db.Uuid @map("user_id")
  type            String    @db.VarChar(50)
  title           String?
  message         String
  link            String?
  read            Boolean?  @default(false)
  deliveryMethod String?   @default("in-app") @db.VarChar(20) @map("delivery_method")
  createdAt      DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  sentBy         String?   @db.VarChar(255) @map("sent_by")
  clubId         String?   @db.VarChar(255) @map("club_id")
  emailSent      Boolean?  @default(false) @map("email_sent")
  emailSentAt   DateTime? @db.Timestamp(6) @map("email_sent_at")
  relatedId      String?   @db.Uuid @map("related_id")
  metadata        Json?     @default("{}")

  @@index([club_id], map: "idx_notifications_club_id")
  @@index([created_at], map: "idx_notifications_created_at")
  @@index([delivery_method], map: "idx_notifications_delivery_method")
  @@index([email_sent, email_sent_at], map: "idx_notifications_email")
  @@index([email_sent], map: "idx_notifications_email_sent")
  @@index([read], map: "idx_notifications_read")
  @@index([sent_by], map: "idx_notifications_sent_by")
  @@index([type], map: "idx_notifications_type")
  @@index([user_id, created_at(sort: Desc)], map: "idx_notifications_user_created")
  @@index([user_id], map: "idx_notifications_user_id")
  @@index([user_id, read], map: "idx_notifications_user_unread")
}

model posts {
  id                           String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                        String                   @db.VarChar(255)
  content                      String
  authorId                    String?                  @db.Uuid @map("author_id")
  clubId                      String?                  @db.VarChar(50) @map("club_id")
  category                     String?                  @db.VarChar(100)
  tags                         String[]                 @default([])
  imageUrl                    String? @map("image_url")
  isPinned                    Boolean?                 @default(false) @map("is_pinned")
  isLocked                    Boolean?                 @default(false) @map("is_locked")
  createdAt                   DateTime?                @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt                   DateTime?                @default(now()) @db.Timestamptz(6) @map("updated_at")
  edited                       Boolean?                 @default(false)
  editedBy                    String?                  @db.Uuid @map("edited_by")
  isAnnouncement              Boolean?                 @default(false) @map("is_announcement")
  viewCount                   Int?                     @default(0) @map("view_count")
  likesCount                  Int?                     @default(0) @map("likes_count")
  commentsCount               Int?                     @default(0) @map("comments_count")
  postImages                  Json?                    @default("[]") @map("post_images")
  featuredImageUrl           String? @map("featured_image_url")
  attachments                  Json?                    @default("[]")
  searchVector                Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, (((title)::text || ' '::text) || content))")) @map("search_vector")
  comments                     comments[]
  likes                        likes[]
  usersPostsAuthorIdTousers users?                   @relation("posts_author_idTousers", fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction) @map("users_posts_author_idTousers")
  clubs                        clubs?                   @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usersPostsEditedByTousers users?                   @relation("posts_edited_byTousers", fields: [edited_by], references: [id], onDelete: NoAction, onUpdate: NoAction) @map("users_posts_edited_byTousers")

  @@index([author_id, created_at(sort: Desc)], map: "idx_posts_author_created")
  @@index([author_id], map: "idx_posts_author_id")
  @@index([club_id, created_at(sort: Desc)], map: "idx_posts_club_created")
  @@index([club_id], map: "idx_posts_club_id")
  @@index([created_at], map: "idx_posts_created_at")
  @@index([is_pinned], map: "idx_posts_is_pinned")
  @@index([search_vector], map: "idx_posts_search", type: Gin)
  @@index([tags], map: "idx_posts_tags", type: Gin)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model proctoring_sessions {
  id                 String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assignmentId      String      @db.Uuid @map("assignment_id")
  userId            String      @db.Uuid @map("user_id")
  sessionStart      DateTime?   @default(now()) @db.Timestamptz(6) @map("session_start")
  sessionEnd        DateTime?   @db.Timestamptz(6) @map("session_end")
  cameraEnabled     Boolean?    @default(false) @map("camera_enabled")
  microphoneEnabled Boolean?    @default(false) @map("microphone_enabled")
  faceVerified      Boolean?    @default(false) @map("face_verified")
  violations         Json?       @default("[]")
  screenshots        Json?       @default("[]")
  system_info        Json?       @default("{}")
  session_data       Json?       @default("{}")
  assignments        assignments @relation(fields: [assignment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_proctoring_sessions_assignment")
  users              users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_proctoring_sessions_user")

  @@index([assignment_id], map: "idx_proctoring_sessions_assignment_id")
  @@index([session_start], map: "idx_proctoring_sessions_session_start")
  @@index([user_id], map: "idx_proctoring_sessions_user_id")
}

model query_cache {
  cacheKey    String    @id @map("cache_key")
  cacheValue  Json @map("cache_value")
  lastUpdated DateTime? @default(now()) @db.Timestamptz(6) @map("last_updated")
  expiresAt   DateTime  @db.Timestamptz(6) @map("expires_at")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model question_media {
  id                   String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  questionId          String               @db.Uuid @map("question_id")
  mediaFileId        String               @db.Uuid @map("media_file_id")
  mediaType           String               @db.VarChar @map("media_type")
  displayOrder        Int?                 @default(0) @map("display_order")
  isPrimary           Boolean?             @default(false) @map("is_primary")
  caption              String?
  createdAt           DateTime?            @default(now()) @db.Timestamptz(6) @map("created_at")
  mediaFiles          media_files          @relation(fields: [media_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question_media_file") @map("media_files")
  assignmentQuestions assignment_questions @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question_media_question") @map("assignment_questions")

  @@index([display_order], map: "idx_question_media_display_order")
  @@index([question_id], map: "idx_question_media_question_id")
}

model question_options {
  id                   String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  questionId          String               @db.Uuid @map("question_id")
  optionText          String @map("option_text")
  isCorrect           Boolean?             @default(false) @map("is_correct")
  ordering             Int                  @default(0)
  createdAt           DateTime?            @default(now()) @db.Timestamptz(6) @map("created_at")
  assignmentQuestions assignment_questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_question") @map("assignment_questions")

  @@index([question_id], map: "idx_question_options_question_id")
}

model question_responses {
  id                     String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submissionId          String                 @db.Uuid @map("submission_id")
  questionId            String                 @db.Uuid @map("question_id")
  selectedOptions       String[]               @db.Uuid @map("selected_options")
  codeAnswer            String? @map("code_answer")
  essayAnswer           String? @map("essay_answer")
  isCorrect             Boolean? @map("is_correct")
  score                  Int?                   @default(0)
  timeSpent             Int? @map("time_spent")
  feedback               String?
  createdAt             DateTime?              @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt             DateTime?              @default(now()) @db.Timestamptz(6) @map("updated_at")
  selectedLanguage      String?                @db.VarChar @map("selected_language")
  lastAutoSave         DateTime?              @db.Timestamptz(6) @map("last_auto_save")
  attemptHistory        Json?                  @default("[]") @map("attempt_history")
  codeResults           code_results[] @map("code_results")
  codingSubmissions     coding_submissions[] @map("coding_submissions")
  assignmentQuestions   assignment_questions   @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_question") @map("assignment_questions")
  assignmentSubmissions assignment_submissions @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_submission") @map("assignment_submissions")

  @@index([question_id], map: "idx_question_responses_question_id")
  @@index([submission_id], map: "idx_question_responses_submission_id")
  @@index([question_id, is_correct], map: "idx_responses_question_correct")
  @@index([submission_id], map: "idx_responses_submission")
}

model security_events {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String    @db.Uuid @map("user_id")
  eventType  String    @db.VarChar @map("event_type")
  ipAddress  String?   @db.VarChar @map("ip_address")
  device_info Json?     @default("{}")
  event_data  Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_security_events_created_at")
  @@index([event_type], map: "idx_security_events_event_type")
  @@index([event_type, created_at(sort: Desc)], map: "idx_security_events_type")
  @@index([user_id, created_at(sort: Desc)], map: "idx_security_events_user")
  @@index([user_id], map: "idx_security_events_user_id")
}

model sessions {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String?   @db.Uuid @map("user_id")
  token             String    @unique @db.VarChar(255)
  expiresAt        DateTime  @db.Timestamptz(6) @map("expires_at")
  createdAt        DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  lastActiveAt    DateTime? @default(now()) @db.Timestamptz(6) @map("last_active_at")
  userAgent        String? @map("user_agent")
  ipAddress        String?   @db.VarChar(45) @map("ip_address")
  device_info       Json?     @default("{}")
  is_trusted        Boolean?  @default(false)
  requires_2fa      Boolean?  @default(true)
  has_completed_2fa Boolean?  @default(false)
  users             users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_sessions_expires")
  @@index([expires_at], map: "idx_sessions_expires_at")
  @@index([last_active_at], map: "idx_sessions_last_active")
  @@index([token], map: "idx_sessions_token")
  @@index([user_id, created_at(sort: Desc)], map: "idx_sessions_user")
  @@index([user_id], map: "idx_sessions_user_id")
}

model system_statistics {
  id                      Int       @id @default(autoincrement())
  activeUsersCount      Int?      @default(0) @map("active_users_count")
  totalUsersCount       Int?      @default(0) @map("total_users_count")
  totalClubsCount       Int?      @default(0) @map("total_clubs_count")
  totalEventsCount      Int?      @default(0) @map("total_events_count")
  totalAssignmentsCount Int?      @default(0) @map("total_assignments_count")
  totalCommentsCount    Int?      @default(0) @map("total_comments_count")
  dailyActiveUsers      Int?      @default(0) @map("daily_active_users")
  weeklyActiveUsers     Int?      @default(0) @map("weekly_active_users")
  monthlyActiveUsers    Int?      @default(0) @map("monthly_active_users")
  timestamp               DateTime? @default(now()) @db.Timestamptz(6)
}

model trusted_devices {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId           String    @db.Uuid @map("user_id")
  deviceIdentifier String    @db.VarChar @map("device_identifier")
  deviceName       String    @db.VarChar @map("device_name")
  deviceType       String?   @db.VarChar @map("device_type")
  browser           String?   @db.VarChar
  os                String?   @db.VarChar
  ipAddress        String?   @db.VarChar @map("ip_address")
  lastUsed         DateTime? @default(now()) @db.Timestamptz(6) @map("last_used")
  createdAt        DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  expiresAt        DateTime? @default(dbgenerated("(CURRENT_TIMESTAMP + '30 days'::interval)")) @db.Timestamptz(6) @map("expires_at")
  trustLevel       String?   @default("login_only") @db.VarChar @map("trust_level")
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, device_identifier])
  @@index([expires_at], map: "idx_trusted_devices_expires")
  @@index([user_id, last_used(sort: Desc)], map: "idx_trusted_devices_user")
  @@index([user_id], map: "idx_trusted_devices_user_id")
}

model user_activities {
  id          Int       @id @default(autoincrement())
  userId     String?   @db.Uuid @map("user_id")
  action      String    @db.VarChar(50)
  targetType String    @db.VarChar(50) @map("target_type")
  targetId   String? @map("target_id")
  targetName String? @map("target_name")
  details     Json?
  createdAt  DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_badges {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId           String?   @db.Uuid @map("user_id")
  badgeName        String    @db.VarChar(255) @map("badge_name")
  badgeDescription String? @map("badge_description")
  badgeIcon        String?   @db.VarChar(255) @map("badge_icon")
  earnedAt         DateTime? @default(now()) @db.Timestamptz(6) @map("earned_at")

  @@unique([user_id, badge_name])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                           String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                        String                      @unique @db.VarChar(255)
  passwordHash                                String                      @db.VarChar(255) @map("password_hash")
  name                                         String                      @db.VarChar(255)
  username                                     String?                     @db.VarChar(255)
  avatar                                       String?
  role                                         String                      @default("student") @db.VarChar(50)
  clubId                                      String?                     @db.VarChar(50) @map("club_id")
  bio                                          String?
  social_links                                 Json?                       @default("{}")
  preferences                                  Json?                       @default("{}")
  created_at                                   DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                                   DateTime?                   @default(now()) @db.Timestamptz(6)
  profile_image_url                            String?
  profile_images                               Json?                       @default("[]")
  verification_photo_url                       String?
  phone_number                                 String?                     @db.VarChar(20)
  date_of_birth                                DateTime?                   @db.Date
  address                                      String?
  emergency_contact                            Json?                       @default("{}")
  phone                                        String?                     @db.VarChar(50)
  location                                     String?                     @db.VarChar(255)
  website                                      String?                     @db.VarChar(255)
  github                                       String?                     @db.VarChar(255)
  linkedin                                     String?                     @db.VarChar(255)
  twitter                                      String?                     @db.VarChar(255)
  email_verified                               Boolean?                    @default(false)
  email_verification_token                     String?                     @db.VarChar(255)
  email_verification_token_expires_at          DateTime?                   @db.Timestamp(6)
  password_reset_token                         String?                     @db.VarChar(255)
  password_reset_token_expires_at              DateTime?                   @db.Timestamp(6)
  oauth_provider                               String?                     @db.VarChar(50)
  oauth_id                                     String?                     @db.VarChar(255)
  oauth_data                                   Json?
  has_password                                 Boolean?                    @default(true)
  totp_secret                                  String?                     @db.VarChar(255)
  totp_temp_secret                             String?                     @db.VarChar(255)
  totp_temp_secret_created_at                  DateTime?                   @db.Timestamp(6)
  totp_enabled                                 Boolean?                    @default(false)
  totp_enabled_at                              DateTime?                   @db.Timestamp(6)
  totp_recovery_codes                          Json?
  notification_preferences                     Json?                       @default("{\"email\": {\"events\": true, \"results\": true, \"assignments\": true, \"discussions\": true}}")
  email_otp_enabled                            Boolean?                    @default(false)
  email_otp_verified                           Boolean?                    @default(false)
  email_otp_secret                             String?                     @db.VarChar
  email_otp_backup_codes                       Json?                       @default("[]")
  email_otp_last_used                          DateTime?                   @db.Timestamptz(6)
  email_otp_created_at                         DateTime?                   @db.Timestamptz(6)
  email_otp                                    String?                     @db.Char(64)
  email_otp_expires_at                         DateTime?                   @db.Timestamptz(6)
  last_activity                                DateTime?                   @default(now()) @db.Timestamptz(6)
  ai_assignment_generations                    ai_assignment_generations[]
  assignment_attempts                          assignment_attempts[]
  assignment_audit_log                         assignment_audit_log[]
  assignment_submissions                       assignment_submissions[]
  assignment_templates                         assignment_templates[]
  assignments                                  assignments[]
  chat_invitations                             chat_invitations[]
  chat_messages_chat_messages_sender_idTousers chat_messages[]             @relation("chat_messages_sender_idTousers")
  chat_messages_chat_messages_user_idTousers   chat_messages[]             @relation("chat_messages_user_idTousers")
  chat_room_members                            chat_room_members[]
  chat_rooms                                   chat_rooms[]
  clubs_clubs_co_coordinator_idTousers         clubs[]                     @relation("clubs_co_coordinator_idTousers")
  clubs_clubs_coordinator_idTousers            clubs[]                     @relation("clubs_coordinator_idTousers")
  clubs_clubs_media_idTousers                  clubs[]                     @relation("clubs_media_idTousers")
  clubs_clubs_secretary_idTousers              clubs[]                     @relation("clubs_secretary_idTousers")
  comments                                     comments[]
  discussion_replies                           discussion_replies[]
  discussions                                  discussions[]
  event_attendees                              event_attendees[]
  events                                       events[]
  likes                                        likes[]
  media_files                                  media_files[]
  posts_posts_author_idTousers                 posts[]                     @relation("posts_author_idTousers")
  posts_posts_edited_byTousers                 posts[]                     @relation("posts_edited_byTousers")
  proctoring_sessions                          proctoring_sessions[]
  security_events                              security_events[]
  sessions                                     sessions[]
  trusted_devices                              trusted_devices[]
  user_activities                              user_activities[]
  clubs_users_club_idToclubs                   clubs?                      @relation("users_club_idToclubs", fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([club_id], map: "idx_users_club_id")
  @@index([created_at], map: "idx_users_created_at")
  @@index([email], map: "idx_users_email")
  @@index([email_verified], map: "idx_users_email_verified")
  @@index([last_activity], map: "idx_users_last_activity")
  @@index([role], map: "idx_users_role")
  @@index([updated_at(sort: Desc)], map: "idx_users_updated_at")
}
