// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MEMBER
  COORDINATOR
  CO_COORDINATOR
  SECRETARY
  MEDIA
  PRESIDENT
  VICE_PRESIDENT
  INNOVATION_HEAD
  TREASURER
  OUTREACH
  ADMIN
}

enum ClubType {
  ASCEND
  ASTER
  ACHIEVERS
  ALTOGETHER
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String
  lastName    String
  password    String
  avatar      String?
  bio         String?
  role        UserRole @default(MEMBER)
  clubRole    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clubMemberships ClubMember[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  assignments     Assignment[]
  announcements   Announcement[]
  events          Event[]

  @@map("users")
}

model Club {
  id          String    @id @default(cuid())
  name        String    @unique
  type        ClubType  @unique
  description String
  color       String
  icon        String?
  guidelines  String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  members       ClubMember[]
  posts         Post[]
  announcements Announcement[]
  assignments   Assignment[]
  events        Event[]

  @@map("clubs")
}

model ClubMember {
  id       String   @id @default(cuid())
  userId   String
  clubId   String
  role     UserRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
  @@map("club_members")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  slug        String    @unique
  authorId    String
  clubId      String?
  tags        String[]
  isPublished Boolean   @default(true)
  isPinned    Boolean   @default(false)
  isLocked    Boolean   @default(false)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  club     Club?     @relation(fields: [clubId], references: [id], onDelete: SetNull)
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  likes    Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorId    String
  clubId      String?
  isGlobal    Boolean  @default(false)
  isPinned    Boolean  @default(false)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  club   Club? @relation(fields: [clubId], references: [id], onDelete: SetNull)

  @@map("announcements")
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String
  authorId    String
  clubId      String
  dueDate     DateTime?
  maxPoints   Int?
  isPublished Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  club   Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("assignments")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  authorId    String
  clubId      String?
  isGlobal    Boolean  @default(false)
  maxAttendees Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  club   Club? @relation(fields: [clubId], references: [id], onDelete: SetNull)

  @@map("events")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}
